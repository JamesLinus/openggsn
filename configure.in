# Process this file with autoconf to produce a configure script.
AC_INIT(openggsn, 0.91, laforge@gnumonks.org)
AC_CONFIG_SRCDIR([gtp/gtp.c])
AM_CONFIG_HEADER([config.h])
#AC_CONFIG_HEADER([config.h])

AC_CANONICAL_SYSTEM

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_AWK
AC_PROG_CPP
AC_PROG_CXX
dnl AC_PROG_RANLIB
LT_INIT
AM_PROG_CC_C_O

AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_LIBOBJ_DIR([lib])
AM_INIT_AUTOMAKE()

#JJAKO Check for libtool
AC_PROG_LIBTOOL
AM_PROG_LIBTOOL

AC_ARG_ENABLE(static-exec,
 [  --enable-static-exec  Enable static linking of executables],
 [ EXEC_LDFLAGS="-all-static"])

AC_SUBST(EXEC_LDFLAGS)


case "${host}" in
  i*86-*-linux-gnu*) 
    EXEC_LDADD="-Wl,--rpath -Wl,/usr/local/lib" ;;
  *solaris*) 
    EXEC_LDADD="-lresolv -lsocket -lnsl" ;;
esac

AC_SUBST(EXEC_LDADD)


# Checks for libraries.
# FIXME: Replace `main' with a function in `-le':
#AC_CHECK_LIB([e], [main])
# FIXME: Replace `main' with a function in `-lgtp':
#AC_CHECK_LIB([gtp], [main])
# FIXME: Replace `main' with a function in `-links':
#AC_CHECK_LIB([inks], [main])

# Checks for libraries.

# This macro is defined in check.m4 and tests if check.h and
# libcheck.a are installed in your system. It sets CHECK_CFLAGS and
# CHECK_LIBS accordingly.
#  AM_PATH_CHECK([MINIMUM-VERSION,
#                [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
AM_PATH_CHECK()

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h stdint.h stdlib.h string.h sys/ioctl.h sys/socket.h sys/time.h syslog.h unistd.h])

# Check for if header
AC_CHECK_HEADERS([linux/if.h net/if.h])

# Check for tun header
AC_CHECK_HEADERS([linux/if_tun.h net/if_tun.h])

# Check for netlink and rtnetlink headers
AC_CHECK_HEADERS([linux/netlink.h linux/rtnetlink.h])


# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_MODE_T
AC_TYPE_SIZE_T
AC_HEADER_TIME

# check for ifaliasreq
AC_MSG_CHECKING(whether struct ifaliasreq exist)
AH_TEMPLATE(HAVE_IFALIASREQ)
AC_EGREP_HEADER(ifaliasreq, net/if.h,
[AC_MSG_RESULT(yes)
 AC_DEFINE([HAVE_IFALIASREQ])],
 AC_MSG_RESULT(no))

# check for ifreq.ifru_netmask
AC_MSG_CHECKING(whether struct ifreq.ifru_netmask exist)
AH_TEMPLATE(HAVE_IFREQ_IFRU_NETMASK)
AC_EGREP_HEADER(ifru_netmask, linux/if.h,
[AC_MSG_RESULT(yes)
 AC_DEFINE([HAVE_IFREQ_IFRU_NETMASK])],
 AC_MSG_RESULT(no))


# check for rt_msghdr
AC_MSG_CHECKING(whether struct rt_msghdr exist)
AH_TEMPLATE(HAVE_RT_MSGHDR)
AC_EGREP_HEADER(rt_msghdr, net/route.h,
[AC_MSG_RESULT(yes)
 AC_DEFINE([HAVE_RT_MSGHDR])],
 AC_MSG_RESULT(no))


# Checks for library functions.
AC_PROG_GCC_TRADITIONAL
# AC_FUNC_MALLOC
# AC_FUNC_MEMCMP 
AC_CHECK_FUNCS([gethostbyname inet_ntoa memset select socket strdup strerror strtol])
AC_CHECK_FUNCS(inet_aton inet_addr, break)

# check for getopt in standard library
adl_FUNC_GETOPT_LONG


dnl
dnl Build ggsn
dnl

AC_ARG_ENABLE([ggsn],
              AS_HELP_STRING([--disable-ggsn],[Disable building GGSN]),
              [want_ggsn=${enableval}],
              [want_ggsn=yes])

build_ggsn=no
if test "x$want_ggsn" = "xyes" ; then
  build_ggsn=yes
fi

AM_CONDITIONAL([BUILD_GGSN],[test "x$build_ggsn" = "xyes"])


dnl
dnl Build sgsnemu
dnl

AC_ARG_ENABLE([sgsnemu],
              AS_HELP_STRING([--disable-sgsnemu],[Disable building SGSN emulator]),
              [want_sgsnemu=${enableval}],
              [want_sgsnemu=yes])

build_sgsnemu=no
if test "x$want_sgsnemu" = "xyes" ; then
  build_sgsnemu=yes
fi

AM_CONDITIONAL([BUILD_SGSNEMU],[test "x$build_sgsnemu" = "xyes"])



dnl
dnl Build gtpdump if libpcap is installed
dnl

have_pcap=no
AC_PATH_PROG([PCAP_CONFIG], [pcap-config], [yes], [no])
if test "x$PCAP_CONFIG" = "xyes"; then
  have_pcap=yes
  PCAP_LIBS=`pcap-config --libs`
  AC_SUBST(PCAP_LIBS)
  PCAP_CFLAGS=`pcap-config --cflags`
  AC_SUBST(PCAP_CFLAGS)
fi


AC_ARG_ENABLE([gtpdump],
              AS_HELP_STRING([--enable-gtpdump],[build gtpdump utility]),
              [want_gtpdump=${enableval}],
              [want_gtpdump=${have_pcap}])

build_gtpdump=no
if test "x$want_gtpdump" = "xyes" ; then
    if test "x$have_pcap" = "xyes"; then
      build_gtpdump=yes
      AC_DEFINE(ENABLE_GTPDUMP, 1, [Enable management server capability])
    else
      AC_MSG_ERROR("libpcap not found!")
    fi
fi

AM_CONDITIONAL([BUILD_GTPDUMP],[test "x$build_gtpdump" = "xyes"])


dnl
dnl Build test programs
dnl

PKG_CHECK_MODULES(CHECK,
                  [check],
                  [have_check=yes],
                  [have_check=no])


AC_ARG_ENABLE([unittests],
              AS_HELP_STRING([--enable-unittests],[build unit tests]),
              [want_unittests=${enableval}],
              [want_unittests=no])


build_unittests=no
if test "x$want_unittests" = "xyes" ; then
    if test "x$have_check" = "xyes"; then
      build_unittests=yes
    else
      AC_MSG_ERROR("libcheck not found! Required to build unit tests")
    fi
fi

AM_CONDITIONAL([BUILD_UNITTESTS],[test "x$build_unittests" = "xyes"])

AC_CONFIG_FILES([Makefile
                 doc/Makefile
                 ggsn/Makefile
                 gtp/Makefile
                 intl/Makefile
                 po/Makefile
                 sgsnemu/Makefile
                 src/Makefile
                 tests/Makefile
                 gtpdump/Makefile
                 openggsn.spec])
AC_OUTPUT

echo "

Configuration:

   Source code location:                              ${srcdir}
   Compiler:                                          ${CC}

   Build ggsn:                                        ${build_ggsn}
   Build sgsnemu:                                     ${build_sgsnemu}

   Build gtpdump:                                     ${build_gtpdump}

   Build Unit Tests:                                  ${build_unittests}

"
dnl
dnl   Build GTK+ client:                                 ${build_gtk}
dnl
dnl     Optional dependencies for GTK+ client:
dnl
dnl      * dbus support:                                 ${use_dbus_glib}
dnl      * gio for watchdir support:                     ${use_gio}
dnl      * libnotify for 'download completed' popups:    ${use_libnotify}
dnl      * libcanberra for 'download completed' sounds:  ${use_canberra}
dnl      * gconf2 to register as a magnet link handler:  ${use_gconf2}
dnl      * libappindicator for an Ubuntu-style tray:     ${use_libappindicator}

dnl   Build Daemon:                                      ${build_daemon}

dnl   Build Mac client:                                  ${build_mac}


